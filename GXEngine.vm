function GXEngine.new 1
push constant 13
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
call AdvancedMath.new 0
pop this 4
push this 0
call Settings.getMaxGravitySinks 1
call Array.new 1
pop this 1
push this 0
call Settings.getMaxPlayers 1
call Array.new 1
pop this 2
push this 0
call Settings.getMaxBullets 1
call Array.new 1
pop this 3
push this 0
call Settings.getworldResolutionX 1
pop this 5
push this 0
call Settings.getworldResolutionY 1
pop this 6
push this 0
call Settings.getscreenSizeX 1
pop this 7
push this 0
call Settings.getscreenSizeY 1
pop this 8
push this 0
call Settings.getScreenBoundLeft 1
pop this 9
push this 0
call Settings.getScreenBoundRight 1
pop this 10
push this 0
call Settings.getScreenBoundTop 1
pop this 11
push this 0
call Settings.getScreenBoundBottom 1
pop this 12
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 0
call Settings.getMaxGravitySinks 1
lt
not
if-goto WHILE_END0
push local 0
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 0
call Settings.getMaxPlayers 1
lt
not
if-goto WHILE_END1
push local 0
push this 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
label WHILE_EXP2
push local 0
push this 0
call Settings.getMaxBullets 1
lt
not
if-goto WHILE_END2
push local 0
push this 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push pointer 0
return
function GXEngine.registerGravitySink 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxGravitySinks 1
lt
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 1
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function GXEngine.registerPlayerSprite 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxPlayers 1
lt
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 2
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function GXEngine.registerBullet 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxBullets 1
lt
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 0
call Settings.getMaxBullets 1
push constant 1
sub
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 0
not
call Bullet.setIsDead 2
pop temp 0
goto IF_END0
label IF_FALSE0
push local 0
push this 3
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push constant 0
return
function GXEngine.unregisterBullet 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
add
pop pointer 1
push that 0
push argument 1
eq
not
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 0
eq
not
and
push local 0
push this 0
call Settings.getMaxBullets 1
lt
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 3
add
pop pointer 1
push that 0
push argument 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push this 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push constant 0
return
function GXEngine.drawAllObjects 5
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxGravitySinks 1
lt
and
not
if-goto WHILE_END0
push local 0
push this 1
add
pop pointer 1
push that 0
pop local 4
push local 4
call GravitySink.getAttributes 1
pop local 1
push local 1
call Attributes.getNeedsUpdate 1
push argument 1
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push local 4
push constant 0
call GXEngine.drawGravitySink 3
pop temp 0
push pointer 0
push local 4
push constant 0
not
call GXEngine.drawGravitySink 3
pop temp 0
push local 1
push constant 0
call Attributes.setNeedsUpdate 2
pop temp 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxBullets 1
lt
and
not
if-goto WHILE_END1
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 2
push local 2
call Bullet.getAttributes 1
pop local 1
push pointer 0
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 0
call GXEngine.drawBullet 3
pop temp 0
push pointer 0
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 0
not
call GXEngine.drawBullet 3
pop temp 0
push local 1
push constant 0
call Attributes.setNeedsUpdate 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
label WHILE_EXP2
push local 0
push this 2
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxPlayers 1
lt
and
not
if-goto WHILE_END2
push local 0
push this 2
add
pop pointer 1
push that 0
pop local 3
push local 3
call PlayerSprite.getAttributes 1
pop local 1
push local 1
call Attributes.getNeedsUpdate 1
push argument 1
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push local 3
push constant 0
call GXEngine.drawPlayerSprite 3
pop temp 0
push pointer 0
push local 3
push constant 0
not
call GXEngine.drawPlayerSprite 3
pop temp 0
push local 1
push constant 0
call Attributes.setNeedsUpdate 2
pop temp 0
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function GXEngine.drawPlayerSprite 12
push argument 0
pop pointer 0
push argument 1
call PlayerSprite.getAttributes 1
pop local 11
push this 0
call Settings.getPlayerSpritePointAngle 1
pop local 3
push this 0
call Settings.getPlayerSpriteSideLength 1
pop local 4
push argument 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 11
call Attributes.getPx 1
push this 5
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 11
call Attributes.getPy 1
push this 6
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 11
call Attributes.getRotation 1
pop local 2
goto IF_END0
label IF_FALSE0
push local 11
call Attributes.getOldPx 1
push this 5
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 11
call Attributes.getOldPy 1
push this 6
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 11
call Attributes.getOldRotation 1
pop local 2
label IF_END0
push local 0
pop local 5
push local 1
pop local 6
push local 0
push this 4
push local 2
push local 3
sub
call AdvancedMath.sin100 2
push local 4
call Math.multiply 2
push constant 100
call Math.divide 2
sub
pop local 7
push local 1
push this 4
push local 2
push local 3
sub
call AdvancedMath.cos100 2
push local 4
call Math.multiply 2
push constant 100
call Math.divide 2
add
pop local 8
push local 0
push this 4
push local 2
push local 3
add
call AdvancedMath.sin100 2
push local 4
call Math.multiply 2
push constant 100
call Math.divide 2
sub
pop local 9
push local 1
push this 4
push local 2
push local 3
add
call AdvancedMath.cos100 2
push local 4
call Math.multiply 2
push constant 100
call Math.divide 2
add
pop local 10
push argument 2
call Screen.setColor 1
pop temp 0
push local 5
push local 6
push local 7
push local 8
call Screen.drawLine 4
pop temp 0
push local 7
push local 8
push local 9
push local 10
call Screen.drawLine 4
pop temp 0
push local 9
push local 10
push local 5
push local 6
call Screen.drawLine 4
pop temp 0
push constant 0
return
function GXEngine.drawGravitySink 4
push argument 0
pop pointer 0
push argument 1
call GravitySink.getAttributes 1
pop local 3
push local 3
call Attributes.getPx 1
push this 5
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 3
call Attributes.getPy 1
push this 6
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 3
call Attributes.getRadius 1
pop local 2
push argument 2
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 2
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function GXEngine.drawBullet 4
push argument 0
pop pointer 0
push argument 1
call Bullet.getAttributes 1
pop local 3
push argument 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
call Attributes.getPx 1
push this 5
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 3
call Attributes.getPy 1
push this 6
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 3
call Attributes.getRadius 1
pop local 2
goto IF_END0
label IF_FALSE0
push local 3
call Attributes.getOldPx 1
push this 5
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 3
call Attributes.getOldPy 1
push this 6
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 3
call Attributes.getOldRadius 1
pop local 2
label IF_END0
push argument 2
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 2
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function GXEngine.drawScreenEdges 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 9
push this 11
push this 10
push this 11
call Screen.drawLine 4
pop temp 0
push this 10
push this 11
push this 10
push this 12
call Screen.drawLine 4
pop temp 0
push this 10
push this 12
push this 9
push this 12
call Screen.drawLine 4
pop temp 0
push this 9
push this 12
push this 9
push this 11
call Screen.drawLine 4
pop temp 0
push constant 0
return
function GXEngine.drawPowerIndicator 6
push argument 0
pop pointer 0
push constant 1
pop local 0
push constant 20
pop local 1
push constant 100
pop local 2
push constant 10
pop local 3
push constant 3
pop local 4
push argument 1
push local 2
call Math.divide 2
pop local 5
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 0
push local 3
add
push local 4
add
push local 1
push local 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 2
add
push local 1
push argument 1
push argument 2
sub
push local 5
call Math.divide 2
add
push local 0
push local 3
add
push constant 4
sub
push local 1
push local 2
add
call Screen.drawRectangle 4
pop temp 0
push local 0
push local 3
add
push local 1
push local 2
add
push argument 3
push local 5
call Math.divide 2
sub
push local 0
push local 3
add
push local 4
add
push local 1
push local 2
add
push argument 3
push local 5
call Math.divide 2
sub
call Screen.drawLine 4
pop temp 0
push constant 0
return
function GXEngine.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 0
call Settings.getMaxGravitySinks 1
lt
not
if-goto WHILE_END0
push local 0
push this 1
add
pop pointer 1
push that 0
pop local 1
push local 1
call GravitySink.dispose 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function GXEngine.borrowMathEngine 0
push argument 0
pop pointer 0
push this 4
return
