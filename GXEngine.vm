function GXEngine.new 1
push constant 11
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
call AdvancedMath.new 0
pop this 2
push argument 1
pop this 1
push this 0
call Settings.getworldResolutionX 1
pop this 3
push this 0
call Settings.getworldResolutionY 1
pop this 4
push this 0
call Settings.getscreenSizeX 1
pop this 5
push this 0
call Settings.getscreenSizeY 1
pop this 6
push this 0
call Settings.getScreenBoundLeft 1
pop this 7
push this 0
call Settings.getScreenBoundRight 1
pop this 8
push this 0
call Settings.getScreenBoundTop 1
pop this 9
push this 0
call Settings.getScreenBoundBottom 1
pop this 10
push pointer 0
return
function GXEngine.drawAllObjects 5
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push this 1
push local 0
call ObjectManager.getGravitySink 2
push constant 0
eq
not
not
if-goto WHILE_END0
push this 1
push local 0
call ObjectManager.getGravitySink 2
pop local 4
push local 4
call GravitySink.getAttributes 1
pop local 1
push local 1
call Attributes.getNeedsUpdate 1
push argument 1
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push local 4
push constant 0
call GXEngine.drawGravitySink 3
pop temp 0
push pointer 0
push local 4
push constant 0
not
call GXEngine.drawGravitySink 3
pop temp 0
push local 1
push constant 0
call Attributes.setNeedsUpdate 2
pop temp 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push this 1
push local 0
call ObjectManager.getBullet 2
push constant 0
eq
not
not
if-goto WHILE_END1
push this 1
push local 0
call ObjectManager.getBulletAttributes 2
pop local 1
push pointer 0
push this 1
push local 0
call ObjectManager.getBullet 2
push constant 0
call GXEngine.drawBullet 3
pop temp 0
push pointer 0
push this 1
push local 0
call ObjectManager.getBullet 2
push constant 0
not
call GXEngine.drawBullet 3
pop temp 0
push local 1
push constant 0
call Attributes.setNeedsUpdate 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
label WHILE_EXP2
push this 1
push local 0
call ObjectManager.getPlayerSprite 2
push constant 0
eq
not
not
if-goto WHILE_END2
push this 1
push local 0
call ObjectManager.getPlayerSprite 2
pop local 3
push this 1
push local 0
call ObjectManager.getPlayerSpriteAttributes 2
pop local 1
push local 1
call Attributes.getNeedsUpdate 1
push argument 1
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push local 3
push constant 0
call GXEngine.drawPlayerSprite 3
pop temp 0
push pointer 0
push local 3
push constant 0
not
call GXEngine.drawPlayerSprite 3
pop temp 0
push local 1
push constant 0
call Attributes.setNeedsUpdate 2
pop temp 0
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function GXEngine.drawPlayerSprite 12
push argument 0
pop pointer 0
push argument 1
call PlayerSprite.getAttributes 1
pop local 11
push this 0
call Settings.getPlayerSpritePointAngle 1
pop local 3
push this 0
call Settings.getPlayerSpriteSideLength 1
pop local 4
push argument 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 11
call Attributes.getPx 1
push this 3
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 11
call Attributes.getPy 1
push this 4
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 11
call Attributes.getRotation 1
pop local 2
goto IF_END0
label IF_FALSE0
push local 11
call Attributes.getOldPx 1
push this 3
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 11
call Attributes.getOldPy 1
push this 4
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 11
call Attributes.getOldRotation 1
pop local 2
label IF_END0
push local 0
pop local 5
push local 1
pop local 6
push local 0
push this 2
push local 2
call AdvancedMath.sin100 2
push local 4
push constant 2
call Math.divide 2
call Math.multiply 2
push constant 100
call Math.divide 2
add
pop local 5
push local 1
push this 2
push local 2
call AdvancedMath.cos100 2
push local 4
push constant 2
call Math.divide 2
call Math.multiply 2
push constant 100
call Math.divide 2
sub
pop local 6
push local 5
push this 2
push local 2
push local 3
sub
call AdvancedMath.sin100 2
push local 4
call Math.multiply 2
push constant 100
call Math.divide 2
sub
pop local 7
push local 6
push this 2
push local 2
push local 3
sub
call AdvancedMath.cos100 2
push local 4
call Math.multiply 2
push constant 100
call Math.divide 2
add
pop local 8
push local 5
push this 2
push local 2
push local 3
add
call AdvancedMath.sin100 2
push local 4
call Math.multiply 2
push constant 100
call Math.divide 2
sub
pop local 9
push local 6
push this 2
push local 2
push local 3
add
call AdvancedMath.cos100 2
push local 4
call Math.multiply 2
push constant 100
call Math.divide 2
add
pop local 10
push argument 2
call Screen.setColor 1
pop temp 0
push local 5
push local 6
push local 7
push local 8
call Screen.drawLine 4
pop temp 0
push local 7
push local 8
push local 9
push local 10
call Screen.drawLine 4
pop temp 0
push local 9
push local 10
push local 5
push local 6
call Screen.drawLine 4
pop temp 0
push constant 0
return
function GXEngine.drawGravitySink 4
push argument 0
pop pointer 0
push argument 1
call GravitySink.getAttributes 1
pop local 3
push local 3
call Attributes.getPx 1
push this 3
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 3
call Attributes.getPy 1
push this 4
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 3
call Attributes.getRadius 1
pop local 2
push argument 2
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 2
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function GXEngine.drawBullet 4
push argument 0
pop pointer 0
push argument 1
call Bullet.getAttributes 1
pop local 3
push argument 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
call Attributes.getPx 1
push this 3
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 3
call Attributes.getPy 1
push this 4
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 3
call Attributes.getRadius 1
pop local 2
goto IF_END0
label IF_FALSE0
push local 3
call Attributes.getOldPx 1
push this 3
call Math.divide 2
push this 0
call Settings.getScreenBoundLeft 1
add
pop local 0
push local 3
call Attributes.getOldPy 1
push this 4
call Math.divide 2
push this 0
call Settings.getScreenBoundTop 1
add
pop local 1
push local 3
call Attributes.getOldRadius 1
pop local 2
label IF_END0
push argument 2
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 2
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function GXEngine.drawScreenEdges 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 7
push this 9
push this 8
push this 9
call Screen.drawLine 4
pop temp 0
push this 8
push this 9
push this 8
push this 10
call Screen.drawLine 4
pop temp 0
push this 8
push this 10
push this 7
push this 10
call Screen.drawLine 4
pop temp 0
push this 7
push this 10
push this 7
push this 9
call Screen.drawLine 4
pop temp 0
push constant 0
return
function GXEngine.drawPowerIndicator 7
push argument 0
pop pointer 0
push constant 1
pop local 0
push constant 20
pop local 1
push constant 100
pop local 2
push constant 10
pop local 3
push constant 3
pop local 4
push constant 3
pop local 5
push argument 1
push local 2
call Math.divide 2
pop local 6
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 0
push local 3
add
push local 4
add
push local 1
push local 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 2
add
push local 1
push argument 1
push argument 2
sub
push local 6
call Math.divide 2
add
push local 0
push local 3
add
push constant 4
sub
push local 1
push local 2
add
call Screen.drawRectangle 4
pop temp 0
push local 0
push local 3
add
push local 1
push local 2
add
push argument 3
push local 6
call Math.divide 2
sub
push local 0
push local 3
add
push local 4
add
push local 1
push local 2
add
push argument 3
push local 6
call Math.divide 2
sub
push local 5
sub
call Screen.drawLine 4
pop temp 0
push local 0
push local 3
add
push local 1
push local 2
add
push argument 3
push local 6
call Math.divide 2
sub
push local 0
push local 3
add
push local 4
add
push local 1
push local 2
add
push argument 3
push local 6
call Math.divide 2
sub
push local 5
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
function GXEngine.drawExplosion 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push argument 3
push constant 2
call Math.divide 2
add
push argument 2
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push argument 1
push argument 2
push argument 3
push constant 2
call Math.divide 2
add
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push argument 3
push constant 3
call Math.divide 2
add
push argument 2
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push argument 1
push argument 2
push argument 3
push constant 3
call Math.divide 2
add
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push argument 3
push constant 2
call Math.divide 2
sub
push argument 2
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push argument 1
push argument 2
push argument 3
push constant 2
call Math.divide 2
add
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push argument 3
push constant 3
call Math.divide 2
add
push argument 2
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push argument 1
push argument 2
push argument 3
push constant 3
call Math.divide 2
sub
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push constant 100
call Sys.wait 1
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push argument 3
push constant 3
call Math.divide 2
sub
push argument 2
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push argument 1
push argument 2
push argument 3
push constant 2
call Math.divide 2
add
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push argument 3
push constant 3
call Math.divide 2
add
push argument 2
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push argument 1
push argument 2
push argument 3
push constant 2
call Math.divide 2
sub
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push argument 3
push constant 3
call Math.divide 2
add
push argument 2
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push argument 1
push argument 2
push argument 3
push constant 2
call Math.divide 2
add
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push argument 3
push constant 3
call Math.divide 2
add
push argument 2
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push argument 1
push argument 2
push argument 3
push constant 4
call Math.divide 2
sub
push argument 3
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push constant 100
call Sys.wait 1
pop temp 0
push constant 0
return
function GXEngine.displayGameResult 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
push constant 110
push constant 500
push constant 122
call Screen.drawRectangle 4
pop temp 0
push constant 10
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 8
call String.new 1
push constant 32
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push argument 1
call Output.printInt 1
pop temp 0
push constant 7
call String.new 1
push constant 32
call String.appendChar 2
push constant 87
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 33
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 0
return
function GXEngine.doInto 23
push argument 0
pop pointer 0
push constant 20
pop local 0
push constant 2
pop local 1
push constant 10
pop local 2
push constant 5
pop local 3
push constant 2
pop local 13
push constant 3
pop local 11
push constant 131
pop local 15
push constant 133
pop local 16
push constant 130
pop local 17
push constant 132
pop local 18
push constant 62
pop local 19
push constant 32
pop local 20
push constant 128
pop local 21
push constant 20
pop local 6
push constant 0
pop local 5
push constant 1
pop local 4
push constant 2
pop local 12
push local 1
push local 0
call Output.moveCursor 2
pop temp 0
push constant 13
call String.new 1
push constant 71
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 86
call String.appendChar 2
push constant 73
call String.appendChar 2
push constant 84
call String.appendChar 2
push constant 89
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 87
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 83
call String.appendChar 2
push constant 33
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 3
push local 2
call Output.moveCursor 2
pop temp 0
push constant 23
call String.new 1
push constant 69
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 71
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 86
call String.appendChar 2
push constant 73
call String.appendChar 2
push constant 84
call String.appendChar 2
push constant 89
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 87
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 82
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 3
push local 13
add
push local 2
call Output.moveCursor 2
pop temp 0
push constant 19
call String.new 1
push constant 78
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 98
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 102
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 76
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 89
call String.appendChar 2
push constant 69
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 83
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 12
call Output.printInt 1
pop temp 0
push local 3
push local 13
push constant 2
call Math.multiply 2
add
push local 2
call Output.moveCursor 2
pop temp 0
push constant 12
call String.new 1
push constant 73
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 115
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 4
push constant 1
sub
push local 3
add
push local 2
push constant 1
sub
call Output.moveCursor 2
pop temp 0
push local 19
call Output.printChar 1
pop temp 0
label WHILE_EXP0
push local 5
push constant 0
eq
not
if-goto WHILE_END0
call Keyboard.keyPressed 0
pop local 14
push local 14
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push constant 1
sub
push local 13
call Math.multiply 2
push local 3
add
push local 2
push constant 1
sub
call Output.moveCursor 2
pop temp 0
push local 20
call Output.printChar 1
pop temp 0
label IF_FALSE0
push local 14
push local 15
eq
push local 4
push constant 1
gt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 4
push constant 1
sub
pop local 4
label IF_FALSE1
push local 14
push local 16
eq
push local 4
push local 11
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 4
push constant 1
add
pop local 4
label IF_FALSE2
push local 14
push local 18
eq
push local 12
push this 0
call Settings.getMaxPlayers 1
lt
and
push local 4
push constant 2
eq
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 12
push constant 1
add
pop local 12
label IF_FALSE3
push local 14
push local 17
eq
push local 12
push constant 0
gt
and
push local 4
push constant 2
eq
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 12
push constant 1
sub
pop local 12
label IF_FALSE4
push local 14
push local 20
eq
push local 14
push local 21
eq
or
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 4
pop local 5
label IF_FALSE5
push local 14
push constant 0
eq
not
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 4
push constant 1
sub
push local 13
call Math.multiply 2
push local 3
add
push local 2
push constant 1
sub
call Output.moveCursor 2
pop temp 0
push local 19
call Output.printChar 1
pop temp 0
push constant 200
call Sys.wait 1
pop temp 0
label IF_FALSE6
push local 14
push local 18
eq
push local 14
push local 17
eq
or
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 3
push local 13
add
push local 2
push constant 19
add
call Output.moveCursor 2
pop temp 0
push local 12
call Output.printInt 1
pop temp 0
label IF_FALSE7
push local 22
push constant 1
add
pop local 22
push this 2
push local 22
call AdvancedMath.plantSeed 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function GXEngine.dispose 1
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function GXEngine.borrowMathEngine 0
push argument 0
pop pointer 0
push this 2
return
