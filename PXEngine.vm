function PXEngine.new 1
push constant 8
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
call AdvancedMath.new 0
pop this 4
push this 0
call Settings.getMaxBullets 1
call Array.new 1
pop this 1
push this 0
call Settings.getMaxPlayers 1
call Array.new 1
pop this 2
push this 0
call Settings.getMaxGravitySinks 1
call Array.new 1
pop this 3
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 0
call Settings.getMaxBullets 1
lt
not
if-goto WHILE_END0
push local 0
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 0
call Settings.getMaxPlayers 1
lt
not
if-goto WHILE_END1
push local 0
push this 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
label WHILE_EXP2
push local 0
push this 0
call Settings.getMaxBullets 1
lt
not
if-goto WHILE_END2
push local 0
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push pointer 0
return
function PXEngine.registerBullet 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxBullets 1
lt
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 0
call Settings.getMaxBullets 1
push constant 1
sub
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 0
not
call Bullet.setIsDead 2
pop temp 0
goto IF_END0
label IF_FALSE0
push local 0
push this 1
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push constant 0
return
function PXEngine.unregisterBullet 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
not
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
not
and
push local 0
push this 0
call Settings.getMaxBullets 1
lt
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push constant 0
return
function PXEngine.registerPlayerSprite 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxPlayers 1
lt
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 2
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function PXEngine.registerGravitySink 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxGravitySinks 1
lt
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 3
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function PXEngine.applyAcceleration 4
push argument 0
pop pointer 0
push argument 1
call Attributes.backup 1
pop temp 0
push argument 1
push constant 0
not
call Attributes.setNeedsUpdate 2
pop temp 0
push this 4
push argument 3
call AdvancedMath.sin100 2
push argument 2
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 0
push this 4
push argument 3
call AdvancedMath.cos100 2
push argument 2
call Math.multiply 2
push constant 1
neg
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 1
push argument 1
call Attributes.getAx 1
pop local 2
push argument 1
call Attributes.getAy 1
pop local 3
push argument 1
push local 2
push local 0
add
push local 3
push local 1
add
call Attributes.setAcceleration 3
pop temp 0
push constant 0
return
function PXEngine.applyCartesianAcceleration 2
push argument 0
pop pointer 0
push argument 1
call Attributes.backup 1
pop temp 0
push argument 1
push constant 0
not
call Attributes.setNeedsUpdate 2
pop temp 0
push argument 1
call Attributes.getAx 1
pop local 0
push argument 1
call Attributes.getAy 1
pop local 1
push argument 1
push local 0
push argument 2
add
push local 1
push argument 3
add
call Attributes.setAcceleration 3
pop temp 0
push constant 0
return
function PXEngine.applyRotation 0
push argument 0
pop pointer 0
push argument 1
call Attributes.backup 1
pop temp 0
push argument 1
push constant 0
not
call Attributes.setNeedsUpdate 2
pop temp 0
push argument 2
push argument 1
call Attributes.getRotation 1
add
pop argument 2
push argument 1
push argument 2
call Attributes.setRotation 2
pop temp 0
push constant 0
return
function PXEngine.stepForward 9
push argument 0
pop pointer 0
push argument 1
push this 0
call Settings.getphysicsTimeStepModifier 1
call Math.divide 2
pop argument 1
push this 0
call Settings.getSpaceFriction 1
push argument 1
call Math.multiply 2
pop local 7
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxPlayers 1
lt
and
not
if-goto WHILE_END0
push local 0
push this 2
add
pop pointer 1
push that 0
pop local 5
push local 5
call PlayerSprite.getAttributes 1
pop this 5
push this 5
call Attributes.getAx 1
pop local 1
push this 5
call Attributes.getAy 1
pop local 2
push this 5
call Attributes.getVx 1
pop local 3
push this 5
call Attributes.getVy 1
pop local 4
push local 1
push constant 0
eq
not
push local 3
push constant 0
eq
not
or
push local 2
push constant 0
eq
not
or
push local 4
push constant 0
eq
not
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
push constant 10
call Math.multiply 2
push local 7
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 3
push local 4
push constant 10
call Math.multiply 2
push local 7
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 4
push this 5
call Attributes.backup 1
pop temp 0
push this 5
push constant 0
not
call Attributes.setNeedsUpdate 2
pop temp 0
push this 5
push local 1
push argument 1
call Math.multiply 2
push local 3
add
push local 2
push argument 1
call Math.multiply 2
push local 4
add
call Attributes.setVelocity 3
pop temp 0
push this 5
push constant 0
push constant 0
call Attributes.setAcceleration 3
pop temp 0
push this 5
call Attributes.getPx 1
pop local 1
push this 5
call Attributes.getPy 1
pop local 2
push this 5
push local 3
push argument 1
call Math.multiply 2
push local 1
add
push local 4
push argument 1
call Math.multiply 2
push local 2
add
call Attributes.setCoordinates 3
pop temp 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxBullets 1
lt
and
not
if-goto WHILE_END1
push local 0
push this 1
add
pop pointer 1
push that 0
pop local 6
push local 6
call Bullet.getAttributes 1
pop local 8
push pointer 0
push local 8
call PXEngine.applyGravitationalField 2
pop temp 0
push local 8
call Attributes.getAx 1
pop local 1
push local 8
call Attributes.getAy 1
pop local 2
push local 8
call Attributes.getVx 1
pop local 3
push local 8
call Attributes.getVy 1
pop local 4
push local 8
call Attributes.backup 1
pop temp 0
push local 8
push constant 0
not
call Attributes.setNeedsUpdate 2
pop temp 0
push local 8
push local 1
push argument 1
call Math.multiply 2
push local 3
add
push local 2
push argument 1
call Math.multiply 2
push local 4
add
call Attributes.setVelocity 3
pop temp 0
push local 8
push constant 0
push constant 0
call Attributes.setAcceleration 3
pop temp 0
push local 8
call Attributes.getPx 1
pop local 1
push local 8
call Attributes.getPy 1
pop local 2
push local 8
push local 3
push argument 1
call Math.multiply 2
push local 1
add
push local 4
push argument 1
call Math.multiply 2
push local 2
add
call Attributes.setCoordinates 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function PXEngine.detectCollision 9
push argument 0
pop pointer 0
push constant 0
pop local 8
push argument 1
call Attributes.getPx 1
pop local 2
push argument 1
call Attributes.getPy 1
pop local 3
push argument 1
call Attributes.getRadius 1
pop local 6
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxPlayers 1
lt
and
not
if-goto WHILE_END0
push local 0
push this 2
add
pop pointer 1
push that 0
pop this 6
push this 6
call PlayerSprite.getAttributes 1
pop this 5
push argument 1
push this 5
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 5
call Attributes.getPx 1
pop local 4
push this 5
call Attributes.getPy 1
pop local 5
push this 5
call Attributes.getRadius 1
pop local 7
push pointer 0
push local 2
push local 3
push local 4
push local 5
push local 6
push local 7
add
call PXEngine.__getDistance__ 6
pop local 1
push local 1
push local 6
push local 7
add
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 3
add
push constant 1
add
pop local 8
label IF_FALSE1
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxGravitySinks 1
lt
and
not
if-goto WHILE_END1
push local 0
push this 3
add
pop pointer 1
push that 0
pop this 7
push this 7
call GravitySink.getAttributes 1
pop this 5
push argument 1
push this 5
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 5
call Attributes.getPx 1
pop local 4
push this 5
call Attributes.getPy 1
pop local 5
push this 5
call Attributes.getRadius 1
pop local 7
push pointer 0
push local 2
push local 3
push local 4
push local 5
push local 6
push local 7
add
call PXEngine.__getDistance__ 6
pop local 1
push local 1
push local 6
push local 7
add
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
pop local 8
label IF_FALSE3
label IF_FALSE2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push this 0
call Settings.getworldResolutionX 1
pop local 0
push local 2
push local 0
call Math.divide 2
pop local 2
push this 0
call Settings.getworldResolutionY 1
pop local 0
push local 3
push local 0
call Math.divide 2
pop local 3
push this 0
call Settings.getScreenBoundLeft 1
pop local 4
push local 2
push local 6
sub
push local 4
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 2
pop local 8
label IF_FALSE4
push this 0
call Settings.getScreenBoundRight 1
pop local 4
push local 2
push local 6
add
push local 4
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 2
pop local 8
label IF_FALSE5
push this 0
call Settings.getScreenBoundTop 1
pop local 5
push local 3
push local 6
sub
push local 5
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 2
pop local 8
label IF_FALSE6
push this 0
call Settings.getScreenBoundBottom 1
pop local 5
push local 3
push local 6
add
push local 5
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 2
pop local 8
label IF_FALSE7
push local 8
return
function PXEngine.__getDistance__ 1
push argument 0
pop pointer 0
push argument 1
push argument 3
sub
call Math.abs 1
pop argument 1
push argument 2
push argument 4
sub
call Math.abs 1
pop argument 2
push argument 1
push this 0
call Settings.getworldResolutionX 1
call Math.divide 2
pop argument 1
push argument 2
push this 0
call Settings.getworldResolutionY 1
call Math.divide 2
pop argument 2
push constant 1
pop local 0
label WHILE_EXP0
push argument 1
push argument 1
call Math.multiply 2
push constant 10000
gt
push argument 1
push argument 1
call Math.multiply 2
push constant 0
lt
or
push argument 2
push argument 2
call Math.multiply 2
push constant 10000
gt
or
push argument 2
push argument 2
call Math.multiply 2
push constant 0
lt
or
push argument 1
push argument 1
call Math.multiply 2
push argument 2
add
push argument 2
call Math.multiply 2
push constant 10000
gt
or
push argument 1
push argument 1
call Math.multiply 2
push argument 2
add
push argument 2
call Math.multiply 2
push constant 0
lt
or
not
if-goto WHILE_END0
push argument 1
push constant 10
call Math.divide 2
pop argument 1
push argument 2
push constant 10
call Math.divide 2
pop argument 2
push local 0
push constant 10
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 1
push argument 1
call Math.multiply 2
push argument 2
push argument 2
call Math.multiply 2
add
call Math.sqrt 1
pop argument 1
push argument 1
push local 0
call Math.multiply 2
pop argument 1
push argument 1
return
function PXEngine.applyGravitationalField 13
push argument 0
pop pointer 0
push argument 1
call Attributes.getMass 1
pop local 1
push argument 1
call Attributes.getPx 1
pop local 5
push argument 1
call Attributes.getPy 1
pop local 6
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 0
eq
not
push local 0
push this 0
call Settings.getMaxGravitySinks 1
lt
and
not
if-goto WHILE_END0
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 12
push local 12
call GravitySink.getAttributes 1
pop local 11
push local 11
call Attributes.getPx 1
pop local 7
push local 11
call Attributes.getPy 1
pop local 8
push local 11
call Attributes.getMass 1
pop local 2
push pointer 0
push local 5
push local 6
push local 7
push local 8
push constant 1000
call PXEngine.__getDistance__ 6
pop local 3
push local 1
push local 2
call Math.multiply 2
push local 3
call Math.divide 2
pop local 4
push local 4
push local 7
push local 5
sub
push this 0
call Settings.getworldResolutionX 1
call Math.divide 2
push local 3
call Math.divide 2
call Math.multiply 2
pop local 9
push local 4
push local 8
push local 6
sub
push this 0
call Settings.getworldResolutionY 1
call Math.divide 2
push local 3
call Math.divide 2
call Math.multiply 2
pop local 10
push pointer 0
push argument 1
push local 9
push local 10
call PXEngine.applyCartesianAcceleration 4
pop temp 0
push argument 1
call Attributes.getAx 1
pop local 7
push argument 1
call Attributes.getAy 1
pop local 8
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function PXEngine.dispose 0
push argument 0
pop pointer 0
push this 1
call Memory.deAlloc 1
pop temp 0
push this 2
call Memory.deAlloc 1
pop temp 0
push this 4
call Memory.deAlloc 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
