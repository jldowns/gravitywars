// Object Manager

// Contains lists of objects, keeps track of them, and provides services to other
// objects to easily find information about objects

class ObjectManager {
  field Settings settings;
  field Array gravitySinkList;
  field Array playerList;
  field Array bulletList;

  constructor ObjectManager new(Settings newSettings) {
    var int i;

    let settings = newSettings;

    let gravitySinkList = Array.new(settings.getMaxGravitySinks());
    let playerList = Array.new(settings.getMaxPlayers());
    let bulletList = Array.new(settings.getMaxBullets());

    // initialize gravity sinks
    let i=0;
    while (i<settings.getMaxGravitySinks()) {
      let gravitySinkList[i] = 0;
      let i=i+1; }
    // initialize playerList
    let i=0;
    while (i<settings.getMaxPlayers()) {
      let playerList[i] = 0;
      let i=i+1; }
    // initialize bullet list
    let i=0;
    while (i<settings.getMaxBullets()) {
      let bulletList[i] = 0;
      let i=i+1; }

    return this;
  }

  method void registerGravitySink(GravitySink newGravitySink) {
    // adds an gravitySink to the list

    var int i;
    let i = 0;
    while(~(gravitySinkList[i]=0) & (i<settings.getMaxGravitySinks()) ) {
      let i=i+1;
    }
    let gravitySinkList[i] = newGravitySink;

    return;
  }

  method void registerPlayer(Player newPlayer) {

    var int i;
    let i = 0;
    while(~(playerList[i]=0) & (i<settings.getMaxPlayers()) ) {
      let i=i+1;
    }
    let playerList[i] = newPlayer;

    return;
  }

  method void registerBullet(Bullet newBullet) {

    var int i;
    let i = 0;
    while(~(bulletList[i]=0) & (i<settings.getMaxBullets()) ) {
      let i=i+1;
    }
    let bulletList[i] = newBullet;
    return;
  }

  method void unregisterBullet(Bullet killBullet) {
    // removes a bullet object from the bulletList
    // and shifts the other bullets over to fill the gap
    var int i;
    var bool found;
    let found = false;

    let i = 0;
    while( ~(bulletList[i]=0) & (i<settings.getMaxBullets()) ) {

      // If we alredy found the bullet, shift this one to the left
      // and fill with a zero.
      if (found) {
        let bulletList[i-1]=bulletList[i];
        let bulletList[i]=0;
      }
      // If this bullet is the one we're looking for, remove it from the list
      if (bulletList[i]=killBullet) {
        let bulletList[i]=0;
        let found=true;
      }
      let i=i+1;
    }
    return;
  }

  method Bullet getBullet(int i) {
    // returns a Bullet from the list at array index i.
    // returns zero if empty or if outside array bounds
    var Bullet returnBullet;

    if (i>settings.getMaxBullets()) {
      let returnBullet = 0;
    } else {
      let returnBullet = bulletList[i];
    }
    return returnBullet;
  }

  method Attributes getBulletAttributes(int i) {
    // returns a Bullet from the list at array index i.
    // returns zero if empty or if outside array bounds
    var Bullet returnBullet;
    var Attributes returnAttributes;

    let returnBullet=getBullet(i);
    if (returnBullet=0) {
      let returnAttributes=0;
    } else {
      let returnAttributes=returnBullet.getAttributes();
    }
    return returnAttributes;
  }


  method Player getPlayer(int i) {
    // returns a Player from the list at array index i.
    // returns zero if empty or if outside array bounds
    var Player returnPlayer;

    if (i>settings.getMaxPlayers()) {
      let returnPlayer = 0;
    } else {
      let returnPlayer = playerList[i];
    }
    return returnPlayer;
  }

  method PlayerSprite getPlayerSprite(int i) {
    // returns a PlayerSprite from the Player at the list at array index i.
    // returns zero if empty or if outside array bounds
    var Player tempPlayer;
    var PlayerSprite returnPS;

    if (i>settings.getMaxPlayers()) {
      let returnPS = 0;
    } else {
      let tempPlayer = playerList[i];
      let returnPS = tempPlayer.getSprite();
    }
    return returnPS;
  }

  method GravitySink getGravitySink(int i) {
    // returns a GravitySink from the list at array index i.
    // returns zero if empty or if outside array bounds
    var GravitySink returnGravitySink;

    if (i>settings.getMaxGravitySinks()) {
      let returnGravitySink = 0;
    } else {
      let returnGravitySink = gravitySinkList[i];
    }
    return returnGravitySink;
  }



  method void dispose () {
    do Memory.deAlloc(this);
    return;
  }


}
