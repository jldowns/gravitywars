// Object Manager

// Contains lists of objects, keeps track of them, and provides services to other
// objects to easily find information about objects

class ObjectManager {
  field Settings settings;
  field Array gravitySinkList;
  field Array playerList;
  field Array bulletList;
  field int numGravitySinks, numPlayers, numBullets;

  constructor ObjectManager new(Settings newSettings) {
    var int i;

    let settings = newSettings;

    let gravitySinkList = Array.new(settings.getMaxGravitySinks());
    let playerList = Array.new(settings.getMaxPlayers());
    let bulletList = Array.new(settings.getMaxBullets());

    let numGravitySinks =0;
    let numPlayers=0;
    let numBullets=0;

    // initialize gravity sinks
    let i=0;
    while (i<settings.getMaxGravitySinks()) {
      let gravitySinkList[i] = 0;
      let i=i+1; }
    // initialize playerList
    let i=0;
    while (i<settings.getMaxPlayers()) {
      let playerList[i] = 0;
      let i=i+1; }
    // initialize bullet list
    let i=0;
    while (i<settings.getMaxBullets()) {
      let bulletList[i] = 0;
      let i=i+1; }

    return this;
  }

  method void registerGravitySink(GravitySink newGravitySink) {
    // adds an gravitySink to the list unless we already are at our
    // max gravitySinks
    if (numGravitySinks<settings.getMaxGravitySinks()){
      let numGravitySinks=numGravitySinks+1;
      let gravitySinkList[numGravitySinks-1]=newGravitySink;
    }
    return;
  }

  method void registerPlayer(Player newPlayer) {
    if (numPlayers<settings.getMaxPlayers()){
      let numPlayers=numPlayers+1;
      let playerList[numPlayers-1]=newPlayer;
    }
    return;
  }

  method void registerBullet(Bullet newBullet) {
    if (numBullets<settings.getMaxBullets()){
      let numBullets=numBullets+1;
      let bulletList[numBullets-1]=newBullet;
    }
    return;
  }

  method bool atMaxBullets() {
    var int i;
    var bool returnValue;
    let i = 0;
    while(~(bulletList[i]=0) & (i<settings.getMaxBullets()) ) {
      let i=i+1;
    }
    if (i=settings.getMaxBullets()) {
      let returnValue=true;
    } else {
      let returnValue=false;
    }

    return returnValue;
  }

  method bool bulletsRemain() {
    var bool returnValue;
    if (getBullet(0)=0) {
      let returnValue=false;
    } else {
      let returnValue=true;
    }
    return returnValue;
  }



  method void unregisterBullet(Bullet killBullet) {
    // removes a bullet object from the bulletList
    // and shifts the other bullets over to fill the gap
    var int i;
    var bool found;
    let found = false;

    let i = 0;
    while( ~(bulletList[i]=0) & (i<settings.getMaxBullets()) ) {

      // If we alredy found the bullet, shift this one to the left
      // and fill with a zero.
      if (found) {
        let bulletList[i-1]=bulletList[i];
        let bulletList[i]=0;
      }
      // If this bullet is the one we're looking for, remove it from the list
      if (bulletList[i]=killBullet) {
        let bulletList[i]=0;
        let numBullets=numBullets-1;
        let found=true;
      }
      let i=i+1;
    }
    return;
  }

  method void unregisterPlayer(Player killPlayer) {
    // removes a player object from the playerList
    // and shifts the other players over to fill the gap
    var int i;
    var bool found;
    let found = false;

    let i = 0;
    while( ~(playerList[i]=0) & (i<settings.getMaxPlayers()) ) {

      // If we alredy found the player, shift this one to the left
      // and fill with a zero.
      if (found) {
        let playerList[i-1]=playerList[i];
        let playerList[i]=0;
      }
      // If this player is the one we're looking for, remove it from the list
      if (playerList[i]=killPlayer) {
        let playerList[i]=0;
        let numPlayers=numPlayers-1;
        let found=true;
      }
      let i=i+1;
    }
    return;
  }

  method void unregisterGravitySink(GravitySink killGravitySink) {
    // removes a gravitySink object from the gravitySinkList
    // and shifts the other gravitySinks over to fill the gap
    var int i;
    var bool found;
    let found = false;

    let i = 0;
    while( ~(gravitySinkList[i]=0) & (i<settings.getMaxGravitySinks()) ) {

      // If we alredy found the gravitySink, shift this one to the left
      // and fill with a zero.
      if (found) {
        let gravitySinkList[i-1]=gravitySinkList[i];
        let gravitySinkList[i]=0;
      }
      // If this gravitySink is the one we're looking for, remove it from the list
      if (gravitySinkList[i]=killGravitySink) {
        let gravitySinkList[i]=0;
        let numGravitySinks=numGravitySinks-1;
        let found=true;
      }
      let i=i+1;
    }
    return;
  }

  method Bullet getBullet(int i) {
    // returns a Bullet from the list at array index i.
    // returns zero if empty or if outside array bounds
    var Bullet returnBullet;

    if (i>settings.getMaxBullets()) {
      let returnBullet = 0;
    } else {
      let returnBullet = bulletList[i];
    }
    return returnBullet;
  }

  method Attributes getBulletAttributes(int i) {
    // returns a Bullet from the list at array index i.
    // returns zero if empty or if outside array bounds
    var Bullet returnBullet;
    var Attributes returnAttributes;

    let returnBullet=getBullet(i);
    if (returnBullet=0) {
      let returnAttributes=0;
    } else {
      let returnAttributes=returnBullet.getAttributes();
    }
    return returnAttributes;
  }

  method Player getPlayer(int i) {
    // returns a Player from the list at array index i.
    // returns zero if empty or if outside array bounds
    var Player returnPlayer;

    if (i>settings.getMaxPlayers()) {
      let returnPlayer = 0;
    } else {
      let returnPlayer = playerList[i];
    }
    return returnPlayer;
  }

  method int playersStillAlive(){
    var int stillAlive;
    var int i;
    var Player currentPlayer;

    let i=0;
    let stillAlive=0;

    let currentPlayer = getPlayer(i);
    while(~(currentPlayer=0)) {
      if (~currentPlayer.getIsDead()) { let stillAlive=stillAlive+1; }
      let i=i+1;
      let currentPlayer = getPlayer(i);
    }
    return stillAlive;
}

  method PlayerSprite getPlayerSprite(int i) {
    // returns a PlayerSprite from the Player at the list at array index i.
    // returns zero if empty or if outside array bounds
    var Player tempPlayer;
    var PlayerSprite returnPS;

    let tempPlayer = getPlayer(i);
    if (tempPlayer=0) {
      let returnPS = 0;
    } else {
      let returnPS = tempPlayer.getSprite();
    }
    return returnPS;
  }

  method Attributes getPlayerSpriteAttributes(int i) {
    var PlayerSprite returnPS;
    var Attributes returnAtt;

    let returnPS=getPlayerSprite(i);

    if (returnPS=0) {
      let returnAtt=0;
    } else {
      let returnAtt=returnPS.getAttributes();
    }
    return returnAtt;
  }


  method GravitySink getGravitySink(int i) {
    // returns a GravitySink from the list at array index i.
    // returns zero if empty or if outside array bounds
    var GravitySink returnGravitySink;

    if (i>settings.getMaxGravitySinks()) {
      let returnGravitySink = 0;
    } else {
      let returnGravitySink = gravitySinkList[i];
    }
    return returnGravitySink;
  }

  method Attributes getAttributes(int i) {
    // virtual list of all attributes in all the lists.
    // you're basically getting the Playerlist, gravitysinklist,
    // and bulletlist all apended to each other, and their attributes returned.
    var Player playerSpecimen;
    var GravitySink GSSpecimen;
    var Bullet bulletSpecimen;
    var Attributes returnAttributes;

    //do Output.printString("*");
    //do Output.printInt(numPlayers);
    //do Output.printString(",");
    //do Output.printInt(numGravitySinks);
    //do Output.printString(",");
    //do Output.printInt(numBullets);
    //do Output.printString("*");

    let returnAttributes=0;
    //do Output.printString("(");
    //do Output.printInt(i);
    //do Output.printString(")");
    //do Output.printString("@");
    //do Output.printInt(numPlayers);
    //do Output.printString(",");
    //do Output.printInt(numGravitySinks);
    //do Output.printString(",");
    //do Output.printInt(numBullets);
    //do Output.printString("#  ");
    // first look at PlayerList
    if ( (i < numPlayers) & (returnAttributes=0)){
      //do Output.printString("it's a player");


      let returnAttributes=getPlayerSpriteAttributes(i);
      //do Output.printInt(returnAttributes);

    } else {
      let i=i-numPlayers;
    }
    // then look at the Gravity Sinks
    if ( (i < numGravitySinks) & (returnAttributes=0)){
      let GSSpecimen=getGravitySink(i);
      let returnAttributes = GSSpecimen.getAttributes();
    } else {
      let i=i-numGravitySinks;
    }
    // and finally the bullets
    if ( (i < numBullets) & (returnAttributes=0)){
      let returnAttributes = getBulletAttributes(i);
    } else {
      let i=i-numBullets;
    }

    return returnAttributes;
  }

  method void cleanBulletList() {
    var int i;
    var Player playerSpecimen;
    var GravitySink GSSpecimen;
    var Bullet bulletSpecimen;
    var Attributes attributeSpecimen;

    let i=0;
    let bulletSpecimen=getBullet(i);
    while ( ~(bulletSpecimen=0) ){
      let attributeSpecimen = bulletSpecimen.getAttributes();
      if (attributeSpecimen.getIsDead() ) {
          do unregisterBullet(bulletSpecimen);
          do bulletSpecimen.dispose();
        }
        let i=i+1;
        let bulletSpecimen=getBullet(i);
        
      }
      return;
  }

  method bool atMaxGravitySinks() {
    if (numGravitySinks=settings.getMaxGravitySinks()) {
      return true;
    } else {
      return false;
    }
  }


  method void dispose () {
    do Memory.deAlloc(this);
    return;
  }


}
