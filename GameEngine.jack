// Game Engine
// Handles game mechanics

class GameEngine {

  field Settings settings;
  field PXEngine px;
  field GXEngine gx;
  field ObjectManager OM;
  field int powerSetting;
  field int deBounce; // counts how many frames since the last keystroke
  field Array forceNextRedraw;
  field AdvancedMath mx;

  // working variables for methods. Defined here
  // to only make one copy

  constructor GameEngine new(Settings gameSettings,
                             GXEngine myGXEngine,
                             PXEngine myPXEngine,
                             AdvancedMath NewMx,
                             ObjectManager newOM) {

    var int i;

    let settings = gameSettings;
    let OM = newOM;

    let gx = myGXEngine;
    let px = myPXEngine;
    let mx = NewMx;
    let powerSetting = 20;
    let deBounce = 0;
    // forceNextRedraw Array is a series of flags that
    // indicate what needs to be redrawn at the next refresh.
    // 0 - refreshscreen    1 - all players
    // 2 - power indicator  3 - borders
    let forceNextRedraw=Array.new(3);
    let forceNextRedraw[0]=false; let forceNextRedraw[1]=false; let forceNextRedraw[2]=false;
    return this;
  }


  method void takeTurn(Player player) {
    // Allows a player to take a turn.
    // Returns when either dead or next turn
      var int action;
      var int foo, bar;
      var Attributes currentAttributes;
      var Player fooPlayer;
      var bool stillMyTurn;

      ////////////////////////////
      var int i,j, res, dist;
      var int x1, y1, x2, y2;
      var int r1, r2;
      var Attributes att1, att2;
      ////////////////////////////

      let stillMyTurn=true;
      let currentAttributes = player.getAttributes();
      let foo = settings.getPlayerStartingPower();
      do player.setPowerRemaining(foo);
      let powerSetting=20;

      let forceNextRedraw[0]=true;
      do updateScreen(player);

      do gx.displayNextTurnTitle(player);

      let forceNextRedraw[0]=true;
      do updateScreen(player);

      while  (stillMyTurn){

        // process user input
        let action = __getInput__();
        if ( (action=1) & (deBounce<1) ) {
          // Jump action
          let foo = currentAttributes.getRotation();
          let bar = settings.getthrusterAcceleration();
          do px.applyAcceleration(currentAttributes,
                               powerSetting*bar, foo);
          let foo=player.getPowerRemaining();
          do player.setPowerRemaining(foo-powerSetting);
          let forceNextRedraw[2]=true;
        }
        if (action=3) {
          let foo=settings.getRotationSensativity()*-1;
          do px.applyRotation(currentAttributes, foo);
        }
        if (action=4) {
          let foo=settings.getRotationSensativity();
          do px.applyRotation(currentAttributes, foo);
        }
        if (action=5) { // increase power
          let foo=settings.getPowerSensativity();
          do changePower(foo, player.getPowerRemaining());
        }
        if (action=6) { // decrease power
          let foo=settings.getPowerSensativity();
          do changePower(foo*-1, player.getPowerRemaining());
        }
        if ( (action=7 & (OM.getNumBullets()<settings.getMaxBullets()) )  ) { //shoot
          do __shoot__(currentAttributes);
          let foo=player.getPowerRemaining();
          do player.setPowerRemaining(foo-powerSetting);
        }
        if (action=8 & (deBounce<1) ) { // quit
          do player.setPowerRemaining(0);
        }
        //if (Keyboard.keyPressed()=75){
        //  let att1 = OM.getAttributes(2);
        //  let att2 = OM.getBulletAttributes(0);
        //  let x1=att1.getPx();
        //  let y1=att1.getPy();
        //  let r1=att1.getRadius();
        //  let x2=att2.getPx();
        //  let y2=att2.getPy();
        //  let r2=att2.getRadius();
        //  do Output.moveCursor(2,2);
        //do Output.printString("(");
        //do Output.printInt(px.__getDistance__(x1,y1,x2,y2,r1+r2));
        //do Output.printString(")");
        //}

        // if an action occured, make sure the new power setting is not more than
        // the amount of power the player has
        if (~(action=0) & (powerSetting>player.getPowerRemaining())){
          let powerSetting=player.getPowerRemaining();}

        // reset the debounce counter.
        if (~(action=0)) {let deBounce=settings.getDebounceSetting();}
        if (deBounce > 0){ let deBounce = deBounce-1; }

        // step forward in time
        let foo = settings.getTimeStep();
        do px.stepForward(foo);
        do Sys.wait(foo);

        // detect collisions from the step forward
        if (px.detectCollision(true)){
          let forceNextRedraw[0]=true;
          do doTheExposions();
        }
        do OM.cleanBulletList(gx);


        // redraw Screen after the dust settles from collisions
        do updateScreen(player);


        // is it the next dude's turn?
        let currentAttributes=player.getAttributes();
        let stillMyTurn =stillMyTurn & (~player.getIsDead()) & (OM.playersStillAlive()>1);
        let stillMyTurn = ( (stillMyTurn & (player.getPowerRemaining()>0) ) | OM.bulletsRemain());
        let stillMyTurn = stillMyTurn | (currentAttributes.getVx()>0) | (currentAttributes.getVy()>0);
      }
      return;
  }

  method void __shoot__(Attributes playerAttributes) {
    // shoots a bullet from player. playerAttributes
    // is the attributes object from the shooting player
    var Bullet newBullet;
    var Attributes currentAttributes;
    var int Px,Py,radius, accel, rotation,mass;
    var int distanceAhead;
    var AdvancedMath mx;

    if (~OM.atMaxBullets()) { // Make sure we can fire more bullets
      let radius=settings.getBulletRadius();
      let accel=powerSetting;
      let Px = playerAttributes.getPx();
      let Py = playerAttributes.getPy();
      let mass=settings.getBulletMass();
      let rotation = playerAttributes.getRotation();
      let distanceAhead = radius+playerAttributes.getRadius()+2;

      let mx = gx.borrowMathEngine();
      let Px = Px + (((mx.sin100(rotation)*(distanceAhead))/100)*settings.getworldResolutionX());
      let Py = Py - (((mx.cos100(rotation)*(distanceAhead))/100)*settings.getworldResolutionX());

      let newBullet = Bullet.new(settings, Px,Py,0,0,radius, mass);
      do OM.registerBullet(newBullet);
      let currentAttributes = newBullet.getAttributes();
      do px.applyAcceleration(currentAttributes,accel, rotation);
      let forceNextRedraw[2]=true;
    }

    return;
  }

  method void changePower(int powerDelta, int powerRemaining) {
    let powerSetting = powerSetting + powerDelta;
    if (powerSetting>powerRemaining) { let powerSetting=powerRemaining;}
    if (powerSetting<settings.getMinPowerSetting()) { let powerSetting=settings.getMinPowerSetting();}
    if (powerSetting>settings.getMaxPowerSetting()) { let powerSetting=settings.getMaxPowerSetting();}
    let forceNextRedraw[2]=true;
    return;
  }


  method int __getInput__() {
    // Polls the keyboard for input and look up
    // the action in the keybinds. Returns an
    // int coresponding with that action.
    var char inputKey;
    var char action;

    let inputKey = Keyboard.keyPressed();
    //do Output.moveCursor(3,0);
    //do Output.printInt(inputKey);
    // don't register inputs if a recent input was made.
    let action = settings.getDesiredAction(inputKey);
    return action;
  }

  method void updateScreen(Player currentPlayer) {
    // if force redraw is true, it'll blank the screen and
    // redraw everything

    var int powerRemaining;
    var int maxPower;

    if (forceNextRedraw[0]) {
      do Screen.clearScreen();
    }
    if (forceNextRedraw[3]|forceNextRedraw[0]) {
      do gx.drawScreenEdges();
    }
    if (forceNextRedraw[2]|forceNextRedraw[0]) {
      let powerRemaining=currentPlayer.getPowerRemaining();
      let maxPower = settings.getPlayerStartingPower();
      do gx.drawPowerIndicator(maxPower,powerRemaining, powerSetting);
    }
    //do Output.moveCursor(0,0);
    //do Output.printString(currentPlayer.getName());

    do gx.drawAllObjects(forceNextRedraw[1]|forceNextRedraw[0]);
    let forceNextRedraw[0]=false;
    let forceNextRedraw[1]=false;
    let forceNextRedraw[2]=false;
    let forceNextRedraw[3]=false;
    return;
  }

  method void killBullet(Bullet killBullet) {
    do OM.unregisterBullet(killBullet);
    do killBullet.dispose();
    let forceNextRedraw[0]=true;
    return;
  }

  method void doTheExposions() {
    var int i;
    var Attributes fooAtt;

    let fooAtt=OM.getAttributes(i);

    // explode everything that needs exploding
      while ( ~(fooAtt=0) ) {
        if( ~(fooAtt.getType()=2) & fooAtt.getIsDead() & ~(fooAtt.getExploded())){
            do gx.drawExplosion( (fooAtt.getPx()/settings.getworldResolutionX())+settings.getScreenBoundLeft(),
                                 (fooAtt.getPy()/settings.getworldResolutionY())+settings.getScreenBoundTop(),
                                  10 );
            do fooAtt.setExploded(true);
        }
      let i=i+1;
      let fooAtt=OM.getAttributes(i);
      }
      
    return;
  }

  method void generateUniverse(Settings settings, ObjectManager OM,
                               int totalGravity, int maxGravitySinkSize, int numberOfPlayers) {
      var int playerLength;
      var int i;
      var bool cleanCreation;
      var Player ps1, ps2;
      var GravitySink gs1;
      var PlayerSprite fooSprite;
      var Attributes att;
      var int maxX, maxY;
      var int rand1, rand2, rand3, rand4;
      var Array playerNames;
      var GravitySink gs1, gs2, gs3, gs4, gs5;

      let playerNames=Array.new(4);
      let playerNames[0]="Ash";
      let playerNames[1]="Cloud";
      let playerNames[2]="Red";
      let playerNames[3]="Blue";

      let maxX = (settings.getscreenSizeX()*settings.getworldResolutionX())-1;
      let maxY = (settings.getscreenSizeY()*settings.getworldResolutionY())-1;
      let playerLength = settings.getPlayerSpriteSideLength()+1;

      // create players
      let i=0;
      while (i<numberOfPlayers) {
        let cleanCreation = false;

        while (~(cleanCreation)){
          do Sys.wait(100);
          //do Output.printString("P");
          //do Output.printInt(i);
          let rand1 = mx.random(playerLength,maxX- (playerLength*settings.getworldResolutionX()) );
          let rand2 = mx.random(playerLength,maxY- (playerLength*settings.getworldResolutionY()) );
          let rand3 = mx.random(0,360);
          //do Output.printString("(");
          //do Output.printInt(rand1);
          //do Output.printString(",");
          //do Output.printInt(rand2);
          //do Output.printString(",");
          //do Output.printInt(rand3);
          //do Output.printString(")");

          let ps1 = Player.new(settings, playerNames[i],rand1, rand2, rand3, playerLength,0);
          do OM.registerPlayer(ps1);

          if ( ~(px.detectCollision(false)) ){
            let cleanCreation=true;
          } else {
            do OM.unregisterPlayer(ps1);
            do ps1.dispose(); }
        } // end inner while
        let i = i+1;
      }
      // end create players

      // create gravity sinks
      let i=0;
      while ((totalGravity>maxGravitySinkSize) & ~(OM.atMaxGravitySinks()) ) {
        let cleanCreation = false;

        while (~(cleanCreation)){
          //do Output.printString("G");
          //do Output.printInt(i);
          let rand3 = mx.random(5,maxGravitySinkSize) +10; // gravity
          let rand1 = mx.random(rand3,maxX- (rand3*settings.getworldResolutionX()) );
          let rand2 = mx.random(rand3,maxY- (rand3*settings.getworldResolutionY()) );
          let gs1 = GravitySink.new(settings, rand1, rand2, rand3, rand3);
          //do Output.printString("(");
          //do Output.printInt(rand1);
          //do Output.printString(",");
          //do Output.printInt(rand2);
          //do Output.printString(",");
          //do Output.printInt(rand3);
          //do Output.printString(")");
          do OM.registerGravitySink(gs1);

          if ( ~(px.detectCollision(false)) ){
            let cleanCreation=true;
            let totalGravity=totalGravity-(rand3+10);
          } else {
            do OM.unregisterGravitySink(gs1);
            do gs1.dispose();
          }
        } // end inner while
        let i = i+1;
      }
      // end create gravity sinks

      return;
  }

}
