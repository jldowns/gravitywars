// Attributes Class

// Containter for shared attributes of objects that have a physical presence.
// These are shared among everyone, unlike things like gravity which only
// special objects have.

class Attributes {

  // Coordinates are stored in real-world units.
  // The GX Engine is responsible for translating these
  // into pixelspace
  field int Px, Py;   // position
  field int Vx, Vy;   // velocity
  field int Ax, Ay;   // acceleration
  field int rotation; // in degrees
  field int radius;   // in pixels
  field int mass;
  field bool isDead;
  field bool exploded;
  // Since we can't inherit over overload methods, we'll use the variable
  field int typeOfObject;
  // to let this child object be aware of its parent.
  // 1 - Player
  // 2 - Gravity Sink
  // 3 - Bullet

  // these are for saving the old location so the gx engine can erase
  // the object's old image
  field int oldPx, oldPy, oldRotation, oldRadius;
  field bool needsUpdate;

  constructor Attributes new(int myType,
                             int startPx, int startPy,
                             int startVx, int startVy,
                             int startRotation,
                             int startRadius,
                             int startMass) {
    let Px = startPx;
    let Py = startPy;
    let Vx = startVx;
    let Vy = startVy;
    let Ax = 0;
    let Ay = 0;
    let rotation = startRotation;
    let radius = startRadius;
    let mass = startMass;

    let oldPx = startPx;
    let oldPy = startPy;
    let oldRotation = startRotation;
    let oldRadius = startRadius;

    let isDead=false;
    let needsUpdate = true;
    let typeOfObject = myType;
    let exploded=false;

    return this;
  }

  method int getPx() { return Px; }
  method int getPy() { return Py; }
  method void setCoordinates(int x, int y) {
    let Px = x;
    let Py = y;
    return; }
  method int getVx() { return Vx; }
  method int getVy() { return Vy; }
  method void setVelocity(int x, int y) {
    let Vx = x;
    let Vy = y;
    return; }

  method int getAx() { return Ax; }
  method int getAy() { return Ay; }
  method void setAcceleration(int x, int y) {
    let Ax = x;
    let Ay = y;
    return; }

  method int getRotation() { return rotation; }
  method void setRotation(int newValue) {
    let rotation = newValue;
    return; }

  method int getRadius() { return radius; }
  method void setRadius(int newValue) {
    let radius = newValue;
    return; }

  method int getMass() { return mass; }

  method bool getExploded(){return exploded;}
  method void setExploded(bool ex){let exploded=ex;return;}

  method void backup() {
    // backs up current attributes into savings containers
    // unless the needsUpdate flag is already set.
    if (~needsUpdate) {
      let oldPx = Px;
      let oldPy = Py;
      let oldRotation = rotation;
      let oldRadius=radius;
    }
    return;
  }

  method bool getNeedsUpdate(){ return needsUpdate; }
  method void setNeedsUpdate(bool nu){ let needsUpdate=nu; return; }
  method bool getIsDead(){ return isDead; }
  method void setIsDead(bool nu){ let isDead=nu; return; }

  // returning the before-update values:
  method int getOldPx() { return oldPx; }
  method int getOldPy() { return oldPy; }
  method int getOldRotation() { return oldRotation; }
  method int getOldRadius() { return oldRadius; }

  method int getType(){return typeOfObject;}


  method void dispose() {
    do Memory.deAlloc(this);
    return; }

}
