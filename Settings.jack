// Game Settings

// Container for game settings, to avoid global variables

class Settings {

  field int screenBoundLeft, screenBoundRight;
  field int screenBoundTop, screenBoundBottom;

  field int timeStep; // time in milliseconds between frames
  field int physicsTimeStepModifier; // One physics timeDelta will be timeStep/physicsTimeStepModifier
  field int worldResolutionX, worldResolutionY; // resolution of the world in meters/pixel

  field int bannerLeftX, bannerRightX;

  field int maxObjects;
  field int maxGravitySinks;
  field int maxPlayers;
  field int maxBullets;
  field int debounceSetting; // the bigger the less sensative

  field int playerSpritePointAngle; // 1/2 angle of the point in degrees
  field int playerSpriteSideLength; // length of each side in pixels
  field int bulletRadius;

  field int thrusterAcceleration; // Force applied to player sprite when moved
  field int rotationSensativity;
  field int powerSensativity;
  field int spaceFriction; // the friction of deep space
  field int bulletActivationAge;
  field int bulletMass;

  field int playerStartingPower;
  field int playerStartingBullets;

  // Keybindings
  field char jump, moveLeft, moveRight;
  field char increasePower, decreasePower;
  field char shoot, quit;

  constructor Settings new() {
    // Set all global game settings here!
    let screenBoundTop=20;
    let screenBoundBottom=220;
    let screenBoundLeft=50;
    let screenBoundRight=330;

    let bannerLeftX = screenBoundLeft;
    let bannerRightX = screenBoundRight;

    let worldResolutionX = 100;
    let worldResolutionY = 100;

    let timeStep = 10;
    let physicsTimeStepModifier = 10;

    let maxObjects = 20;
    let maxGravitySinks = 5;
    let maxPlayers = 2;
    let maxBullets = 1;
    let debounceSetting = 10;

    let playerSpritePointAngle = 15; // the point of the player sprite will be twice this, or 30 degrees
    let playerSpriteSideLength = 10;
    let bulletRadius = 2;

    let thrusterAcceleration = 25;
    let rotationSensativity = 2;
    let powerSensativity = 2;
    let spaceFriction = 9; // never let this equal zero!
    let bulletActivationAge = 100;
    let bulletMass=10;

    let playerStartingPower = 300;
    let playerStartingBullets=1;

    // Keybindings
    let jump          = 74;  // J
    let moveLeft      = 130; // Left arrow
    let moveRight     = 132; // Right Arrow
    let increasePower = 131; // up arrow
    let decreasePower = 133; // down arrow
    let shoot         = 32;  // space
    let quit          = 81;  // Q
    return this;
  }

  method int getScreenBoundTop() { return screenBoundTop; }
  method int getScreenBoundBottom() { return screenBoundBottom; }
  method int getScreenBoundLeft() { return screenBoundLeft; }
  method int getScreenBoundRight() { return screenBoundRight; }

  method int getBannerLeftX(){return bannerLeftX;}
  method int getBannerRightX(){return bannerRightX;}

  method int getscreenSizeX() { return screenBoundRight - screenBoundLeft; }
  method int getscreenSizeY() { return screenBoundBottom - screenBoundTop; }
  method int getworldResolutionX() { return worldResolutionX; }
  method int getworldResolutionY() { return worldResolutionY; }

  method int getTimeStep() { return timeStep; }
  method int getphysicsTimeStepModifier() { return physicsTimeStepModifier; }

  method int getMaxObjects() { return maxObjects; }
  method void setMaxObjects(int newMax) {
    let maxObjects = newMax;
    return; }

  method int getMaxGravitySinks() { return maxGravitySinks; }
  method void setMaxGravitySinks(int newMax) {
    let maxGravitySinks = newMax;
    return; }

  method int getMaxPlayers() { return maxPlayers; }
  method void setMaxPlayers(int newMax) {
    let maxPlayers = newMax;
    return; }

  method int getMaxBullets() { return maxBullets; }
  method void setMaxBullets(int newMax) {
    let maxBullets = newMax;
    return; }

  method int getPlayerSpritePointAngle() { return playerSpritePointAngle; }
  method int getPlayerSpriteSideLength() { return playerSpriteSideLength; }

  method int getthrusterAcceleration() { return thrusterAcceleration; }
  method int getRotationSensativity() { return rotationSensativity; }
  method int getPowerSensativity() { return powerSensativity; }
  method int getSpaceFriction() { return spaceFriction; }
  method int getBulletRadius() { return bulletRadius; }
  method int getDebounceSetting(){return debounceSetting;}

  method int getBulletActivationAge(){return bulletActivationAge;}
  method int getBulletMass(){ return bulletMass; }

  method int getPlayerStartingPower(){ return playerStartingPower; }
  method int getPlayerStartingBullets(){ return playerStartingBullets; }


  method int getDesiredAction (char key) {
    // Returns the action bound to a keypress.
    // 0 - No binding/No key pressed
    // 1 - HyperJump
    // 3 - Move Left      4 - Move Right
    // 5 - Increase pwr   6 - Decrease pwr
    // 7 - Shoot          8 - Quit
    var int action;

    let action = 0;

    if (key=jump){ let action = 1; }
    if (key=moveLeft){ let action = 3; }
    if (key=moveRight){ let action = 4; }
    if (key=increasePower){ let action = 5; }
    if (key=decreasePower){ let action = 6; }
    if (key=shoot){ let action = 7; }
    if (key=quit){ let action = 8; }

    return action;
  }


  method void dispose() {
    do Memory.deAlloc(this);
    return; }

}
